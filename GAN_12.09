{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bfe05b0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import TensorDataset, DataLoader\n",
    "from tqdm.notebook import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "31927729",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'data/modelnet10.npz'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[16], line 64\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m train_voxel, test_voxel, train_labels, test_labels, class_map\n\u001b[1;32m     63\u001b[0m \u001b[38;5;66;03m# Loading data\u001b[39;00m\n\u001b[0;32m---> 64\u001b[0m train_v, test_v, train_l, test_l, class_map \u001b[38;5;241m=\u001b[39m \u001b[43mdata_loader\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mdata/modelnet10.npz\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     65\u001b[0m \u001b[38;5;66;03m#Create a subset of the data\u001b[39;00m\n\u001b[1;32m     66\u001b[0m train_v \u001b[38;5;241m=\u001b[39m train_v[:\u001b[38;5;241m100\u001b[39m]\n",
      "Cell \u001b[0;32mIn[16], line 55\u001b[0m, in \u001b[0;36mdata_loader\u001b[0;34m(path)\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdata_loader\u001b[39m(path):\n\u001b[1;32m     54\u001b[0m     \u001b[38;5;66;03m# Code adapted from assignment text\u001b[39;00m\n\u001b[0;32m---> 55\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mload\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mallow_pickle\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m     56\u001b[0m     train_voxel \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mfrom_numpy(data[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtrain_voxel\u001b[39m\u001b[38;5;124m\"\u001b[39m])\u001b[38;5;241m.\u001b[39mfloat()\u001b[38;5;241m.\u001b[39munsqueeze(\u001b[38;5;241m1\u001b[39m) \u001b[38;5;66;03m# Training 3D voxel samples\u001b[39;00m\n\u001b[1;32m     57\u001b[0m     test_voxel \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mfrom_numpy(data[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_voxel\u001b[39m\u001b[38;5;124m\"\u001b[39m])\u001b[38;5;241m.\u001b[39mfloat()\u001b[38;5;241m.\u001b[39munsqueeze(\u001b[38;5;241m1\u001b[39m) \u001b[38;5;66;03m# Test 3D voxel samples\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/envs/torch/lib/python3.9/site-packages/numpy/lib/npyio.py:427\u001b[0m, in \u001b[0;36mload\u001b[0;34m(file, mmap_mode, allow_pickle, fix_imports, encoding, max_header_size)\u001b[0m\n\u001b[1;32m    425\u001b[0m     own_fid \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m    426\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 427\u001b[0m     fid \u001b[38;5;241m=\u001b[39m stack\u001b[38;5;241m.\u001b[39menter_context(\u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mos_fspath\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrb\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m)\n\u001b[1;32m    428\u001b[0m     own_fid \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m    430\u001b[0m \u001b[38;5;66;03m# Code to distinguish from NumPy binary files and pickles.\u001b[39;00m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'data/modelnet10.npz'"
     ]
    }
   ],
   "source": [
    "class Generator(nn.Module):\n",
    "    def __init__(self, z_dim=200):\n",
    "        super(Generator, self).__init__()\n",
    "\n",
    "        self.main = nn.Sequential(\n",
    "            #in_channels, out_channels, kernel_size, stride=1, padding=0\n",
    "            nn.ConvTranspose3d(in_channels=z_dim,\n",
    "                               out_channels=512,\n",
    "                               kernel_size=(4,4,4),\n",
    "                               stride = 1,\n",
    "                               padding = 0,\n",
    "                               bias=False),\n",
    "            nn.BatchNorm3d(512),\n",
    "            nn.ReLU(True),\n",
    "            nn.ConvTranspose3d(512, 256, (4,4,4), 2, 1, bias=False),\n",
    "            nn.BatchNorm3d(256),\n",
    "            nn.ReLU(True),\n",
    "            nn.ConvTranspose3d(256, 128, (4,4,4), 2, 1, bias=False),\n",
    "            nn.BatchNorm3d(128),\n",
    "            nn.ReLU(True),\n",
    "            nn.ConvTranspose3d(128, 64, (4,4,4), 2, 1, bias=False),\n",
    "            nn.BatchNorm3d(64),\n",
    "            nn.ReLU(True),\n",
    "            nn.ConvTranspose3d(64, 1, (4,4,4), 2, 1, bias=False),\n",
    "            nn.Sigmoid()\n",
    "        )\n",
    "\n",
    "    def forward(self, input):\n",
    "        return self.main(input)\n",
    "\n",
    "class Discriminator(nn.Module):\n",
    "    def __init__(self, z_dim=200):\n",
    "        super(Discriminator, self).__init__()\n",
    "        self.main = nn.Sequential(\n",
    "            nn.Conv3d(1, 64, 4, 2, 1, bias=False),\n",
    "            nn.LeakyReLU(0.2, inplace=True),\n",
    "            nn.Conv3d(64, 128, 4, 2, 1, bias=False),\n",
    "            nn.BatchNorm3d(128),\n",
    "            nn.LeakyReLU(0.2, inplace=True),\n",
    "            nn.Conv3d(128, 256, 4, 2, 1, bias=False),\n",
    "            nn.BatchNorm3d(256),\n",
    "            nn.LeakyReLU(0.2, inplace=True),\n",
    "            nn.Conv3d(256, 512, 4, 2, 1, bias=False),\n",
    "            nn.BatchNorm3d(512),\n",
    "            nn.LeakyReLU(0.2, inplace=True),\n",
    "            nn.Conv3d(512, z_dim, 4, 1, 0, bias=False),\n",
    "            nn.Sigmoid()\n",
    "        )\n",
    "\n",
    "    def forward(self, input):\n",
    "        return self.main(input).view(-1, 1).squeeze(1)\n",
    "\n",
    "def data_loader(path):\n",
    "    # Code adapted from assignment text\n",
    "    data = np.load(path, allow_pickle=True)\n",
    "    train_voxel = torch.from_numpy(data[\"train_voxel\"]).float().unsqueeze(1) # Training 3D voxel samples\n",
    "    test_voxel = torch.from_numpy(data[\"test_voxel\"]).float().unsqueeze(1) # Test 3D voxel samples\n",
    "    train_labels = torch.from_numpy(data[\"train_labels\"]).long() # Training labels (integers from 0 to 9)\n",
    "    test_labels = torch.from_numpy(data[\"test_labels\"]).long() # Test labels (integers from 0 to 9)\n",
    "    class_map = data[\"class_map\"] # Dictionary mapping the labels to their class names.\n",
    "\n",
    "    return train_voxel, test_voxel, train_labels, test_labels, class_map\n",
    "# Loading data\n",
    "train_v, test_v, train_l, test_l, class_map = data_loader(\"data/modelnet10.npz\")\n",
    "#Create a subset of the data\n",
    "train_v = train_v[:100]\n",
    "train_l = train_l[:100]\n",
    "# Create a TensorDataset\n",
    "train_dataset = TensorDataset(train_v)\n",
    "# Define a DataLoader\n",
    "batch_size = 10 # Somewhere between 10 and 100 as outlined in the assignment\n",
    "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
    "\n",
    "\n",
    "# Hyperparameters\n",
    "z_dim = 200\n",
    "lr_gen = 0.0025\n",
    "lr_disc = 1e-5\n",
    "num_epochs = 3\n",
    "batch_size = 10\n",
    "\n",
    "# Initialize lists to store losses\n",
    "G_losses = []\n",
    "D_losses = []\n",
    "\n",
    "# Initialize networks\n",
    "generator = Generator(z_dim)\n",
    "discriminator = Discriminator(z_dim)\n",
    "\n",
    "# Loss function\n",
    "criterion = nn.BCELoss()\n",
    "\n",
    "# Optimizers\n",
    "optimizer_gen = optim.Adam(generator.parameters(), lr=lr_gen, betas=(0.5, 0.999))\n",
    "optimizer_disc = optim.Adam(discriminator.parameters(), lr=lr_disc, betas=(0.5, 0.999))\n",
    "\n",
    "# Function to create labels\n",
    "def ones_target(size):\n",
    "    data = torch.ones(size)\n",
    "    return data\n",
    "\n",
    "def zeros_target(size):\n",
    "    data = torch.zeros(size)\n",
    "    return data\n",
    "\n",
    "# Training loop\n",
    "for epoch in tqdm(range(num_epochs), desc=\"Epochs\"):\n",
    "    inner_loop = tqdm(range(100), desc=\"Batches\", leave=False)  # Replace range(100) with your DataLoader\n",
    "    for i in inner_loop:\n",
    "        # Replace the next line with loading real_data from your DataLoader\n",
    "        real_data = train_loader[i][0]\n",
    "        batch_size = real_data.size(0)\n",
    "\n",
    "        # Generate fake data\n",
    "        noise = torch.randn(batch_size, z_dim, 1, 1, 1)\n",
    "        fake_data = generator(noise).detach()\n",
    "\n",
    "        # Train Discriminator\n",
    "        optimizer_disc.zero_grad()\n",
    "\n",
    "        prediction_real = discriminator(real_data)\n",
    "        target_real = ones_target(batch_size)\n",
    "        error_real = criterion(prediction_real, target_real)\n",
    "        error_real.backward()\n",
    "\n",
    "        prediction_fake = discriminator(fake_data)\n",
    "        target_fake = zeros_target(batch_size)\n",
    "        error_fake = criterion(prediction_fake, target_fake)\n",
    "        error_fake.backward()\n",
    "\n",
    "        optimizer_disc.step()\n",
    "\n",
    "        d_error = error_real + error_fake\n",
    "\n",
    "        # Train Generator\n",
    "        optimizer_gen.zero_grad()\n",
    "\n",
    "        noise = torch.randn(batch_size, z_dim, 1, 1, 1)\n",
    "        fake_data = generator(noise)\n",
    "        prediction = discriminator(fake_data)\n",
    "        target = ones_target(batch_size)\n",
    "        g_error = criterion(prediction, target)\n",
    "        g_error.backward()\n",
    "\n",
    "        optimizer_gen.step()\n",
    "\n",
    "        # Update inner loop description\n",
    "        inner_loop.set_postfix({\"G_loss\": g_error.item(), \"D_loss\": d_error.item()})\n",
    "        G_losses.append(g_error.item())\n",
    "        D_losses.append(d_error.item())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e5eec59",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9 (pytorch)",
   "language": "python",
   "name": "pytorch"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
